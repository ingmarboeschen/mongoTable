% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mongoTable.R
\name{mongoTable}
\alias{mongoTable}
\title{This function generates one-dimensional and two-dimensional frequency tables from data stored in a MongoDB database. Rather than retrieving the entire dataset through a `find()` operation, this function leverages MongoDB's aggregation capabilities to compile frequency data directly on the server, followed by post-processing in R.}
\usage{
mongoTable(
  connection,
  x,
  y = NULL,
  query = "{}",
  lowerize = FALSE,
  limit = NULL,
  sort = FALSE,
  decreasing = TRUE
)
}
\arguments{
\item{connection}{A character vector representing a MongoDB connection object initialized with `mongolite::mongo()`.}

\item{x}{A character string specifying the first field variable for which frequencies should be computed.}

\item{y}{An optional character string specifying a second field variable for which frequencies should also be computed.}

\item{query}{An optional character string representing a MongoDB query used to filter data (e.g., `'{ "year": 2024 }'`).}

\item{lowerize}{A logical value that, when set to `TRUE`, converts all level names in one-dimensional frequency tables to lowercase.}

\item{limit}{An integer value that specifies the maximum number of entries or dimensions in the output table.}

\item{sort}{A logical value indicating whether the output should be sorted by frequency. Defaults to `FALSE`.}

\item{decreasing}{A logical value that, when set to `TRUE` and `sort` is also `TRUE`, returns the output sorted by decreasing frequencies. If `TRUE` while `sort` is `FALSE`, the level names in the output are listed in decreasing order.}
}
\value{
A frequency table, either one-dimensional or two-dimensional, based on the specified parameters.
}
\description{
This function generates one-dimensional and two-dimensional frequency tables from data stored in a MongoDB database. Rather than retrieving the entire dataset through a `find()` operation, this function leverages MongoDB's aggregation capabilities to compile frequency data directly on the server, followed by post-processing in R.
}
\examples{
## use mongolite::mongo() to connect to a MongoDB instance (demo server)
mon <- mongolite::mongo("mtcars", url =
"mongodb+srv://readwrite:test@cluster0-84vdt.mongodb.net/test")
# Make sure to drop any existing collection before inserting
if(mon$count() > 0) mon$drop()
# Insert the 'mtcars' dataset into the MongoDB collection
mon$insert(mtcars)
# Verify that the number of documents inserted matches the number of rows in 'mtcars'
stopifnot(mon$count() == nrow(mtcars))

## Create a one-dimensional frequency table 
# for all x
mongoTable(connection = "mon", x = "cyl")
# for all x matching a query (cars with mpg greater than 20)
mongoTable(connection="mon", x="cyl", query = '{\"mpg\": {\"$gt": 20}}')

## Create a two-dimensional frequency table
# for all x and y
mongoTable(con = "mon", x = "cyl", y = "gear")
# for all x and y matching a query  (cars with mpg greater than 20)
mongoTable(con="mon", x = "cyl", y = "gear", query = '{\"mpg\": {\"$gt": 20}}')
}
\keyword{MongoDB}
\keyword{frequency}
\keyword{table}
